import { container } from "tsyringe";
import { tokens } from "./tokens";
import { Config } from "@config/config";
import Routes from "@presentation/http/routes";
import RedisClient from "@infrastructure/cache/redis";
import { SystemRouter } from "@presentation/http/routers/v1/systemRouter";
import { BrokerRouter } from "@presentation/http/routers/v1/brokerRouter";
import FindByIdBrokerController from "@presentation/http/controllers/broker/findByIdBrokerController";
import FindAllBrokerController from "@presentation/http/controllers/broker/findAllBrokerController";
import CreateBrokerController from "@presentation/http/controllers/broker/createBrokerController";
import DeleteBrokerController from "@presentation/http/controllers/broker/deleteBrokerController";
import UpdateBrokerController from "@presentation/http/controllers/broker/updateBrokerController";
import BrokerRepository from "@domain/broker/infrastructure/brokerRepository";
import BrokerService from "@domain/broker/services/brokerService";
import { CategoryRouter } from "@presentation/http/routers/v1/categoryRouter";
import FindByIdCategoryController from "@presentation/http/controllers/category/findByIdCategoryController";
import FindAllCategoryController from "@presentation/http/controllers/category/findAllCategoryController";
import CategoryRepository from "@domain/category/infrastructure/categoryRepository";
import CategoryService from "@domain/category/services/categoryService";
import SystemService from "@domain/system/services/systemService";
import HealthcheckController from "@presentation/http/controllers/system/healthcheckController";
import SystemRepository from "@domain/system/infrastructure/systemRepository";
import ApmClient from "@infrastructure/apm/apm";
import KafkaClient from "@infrastructure/kafka/kafka";
import EventsService from "@domain/events/services/eventsService";
import EventsRepository from "@domain/events/infrastructure/eventsRepository";
import BatchCreateEventsController from "@presentation/http/controllers/events/batchCreateEventsController";
import FindAllEventsController from "@presentation/http/controllers/events/findAllEventsController";
import FindByIdEventsController from "@presentation/http/controllers/events/findByIdEventsController";
import { EventsRouter } from "@presentation/http/routers/v1/eventsRouter";
import { DividendsRouter } from "@presentation/http/routers/v1/dividendsRouter";
import FindByIdDividendsController from "@presentation/http/controllers/dividends/findByIdDividendsController";
import FindAllDividendsController from "@presentation/http/controllers/dividends/findAllDividendsController";
import CreateDividendsController from "@presentation/http/controllers/dividends/createDividendsController";
import DeleteDividendsController from "@presentation/http/controllers/dividends/deleteDividendsController";
import UpdateDividendsController from "@presentation/http/controllers/dividends/updateDividendsController";
import DividendsRepository from "@domain/dividends/infrastructure/dividensRepository";
import DividendsService from "@domain/dividends/services/dividensService";
import { InvestmentRouter } from "@presentation/http/routers/v1/investmentRouter";
import FindByIdInvestmentController from "@presentation/http/controllers/investment/findByIdInvestmentController";
import FindAllInvestmentController from "@presentation/http/controllers/investment/findAllInvestmentController";
import CreateInvestmentController from "@presentation/http/controllers/investment/createInvestmentController";
import DeleteInvestmentController from "@presentation/http/controllers/investment/deleteInvestmentController";
import UpdateInvestmentController from "@presentation/http/controllers/investment/updateInvestmentController";
import InvestmentRepository from "@domain/investment/infrastructure/investmentRepository";
import InvestmentService from "@domain/investment/services/investmentService";
import InvestRepository from "@domain/investment/infrastructure/investRepository";
import BatchUpdateInvestmentController from "@presentation/http/controllers/investment/batchUpdateInvestmentController";
import { TransactionRouter } from "@presentation/http/routers/v1/transactionRouter";
import FindByIdTransactionController from "@presentation/http/controllers/transaction/findByIdTransactionController";
import FindAllTransactionController from "@presentation/http/controllers/transaction/findAllTransactionController";
import CreateTransactionController from "@presentation/http/controllers/transaction/createTransactionController";
import DeleteTransactionController from "@presentation/http/controllers/transaction/deleteTransactionController";
import UpdateTransactionController from "@presentation/http/controllers/transaction/updateTransactionController";
import TransactionRepository from "@domain/transaction/infrastructure/transactionRepository";
import TransactionService from "@domain/transaction/services/transactionService";
import PaidDividendsController from "@presentation/http/controllers/dividends/paidDividendsController";
import AutoCreateDividendsController from "@presentation/http/controllers/dividends/autoCreateDividendsController";
import EventTransactionController from "@presentation/http/controllers/transaction/eventTransactionController";
import InvestmentViewRepository from "@domain/investment/infrastructure/investmentViewRepository";
import SyncBalanceInvestmentController from "@presentation/http/controllers/investment/asyncBalanceInvestmentController";

const childContainer = container.createChildContainer();

childContainer.registerSingleton(tokens.Config, Config);
childContainer.registerSingleton(tokens.KafkaClient, KafkaClient);
childContainer.registerSingleton(tokens.RedisClient, RedisClient);
childContainer.registerSingleton(tokens.ApmClient, ApmClient);
childContainer.registerSingleton(tokens.Routes, Routes);
childContainer.registerSingleton(tokens.SystemRouter, SystemRouter);
childContainer.registerSingleton(tokens.HealthcheckController, HealthcheckController);
childContainer.registerSingleton(tokens.SystemService, SystemService);
childContainer.registerSingleton(tokens.SystemRepository, SystemRepository);
childContainer.registerSingleton(tokens.InvestRepository, InvestRepository);

childContainer.registerSingleton(tokens.BrokerRouter, BrokerRouter);
childContainer.registerSingleton(tokens.FindByIdBrokerController, FindByIdBrokerController);
childContainer.registerSingleton(tokens.FindAllBrokerController, FindAllBrokerController);
childContainer.registerSingleton(tokens.CreateBrokerController, CreateBrokerController);
childContainer.registerSingleton(tokens.DeleteBrokerController, DeleteBrokerController);
childContainer.registerSingleton(tokens.UpdateBrokerController, UpdateBrokerController);
childContainer.registerSingleton(tokens.BrokerRepository, BrokerRepository);
childContainer.registerSingleton(tokens.BrokerService, BrokerService);

childContainer.registerSingleton(tokens.CategoryRouter, CategoryRouter);
childContainer.registerSingleton(tokens.FindByIdCategoryController, FindByIdCategoryController);
childContainer.registerSingleton(tokens.FindAllCategoryController, FindAllCategoryController);
childContainer.registerSingleton(tokens.CategoryRepository, CategoryRepository);
childContainer.registerSingleton(tokens.CategoryService, CategoryService);

childContainer.registerSingleton(tokens.EventsRouter, EventsRouter);
childContainer.registerSingleton(tokens.FindByIdEventsController, FindByIdEventsController);
childContainer.registerSingleton(tokens.FindAllEventsController, FindAllEventsController);
childContainer.registerSingleton(tokens.BatchCreateEventsController, BatchCreateEventsController);
childContainer.registerSingleton(tokens.EventsRepository, EventsRepository);
childContainer.registerSingleton(tokens.EventsService, EventsService);

childContainer.registerSingleton(tokens.DividendsRouter, DividendsRouter);
childContainer.registerSingleton(tokens.FindByIdDividendsController, FindByIdDividendsController);
childContainer.registerSingleton(tokens.FindAllDividendsController, FindAllDividendsController);
childContainer.registerSingleton(tokens.AutoCreateDividendsController, AutoCreateDividendsController);
childContainer.registerSingleton(tokens.PaidDividendsController, PaidDividendsController);
childContainer.registerSingleton(tokens.CreateDividendsController, CreateDividendsController);
childContainer.registerSingleton(tokens.DeleteDividendsController, DeleteDividendsController);
childContainer.registerSingleton(tokens.UpdateDividendsController, UpdateDividendsController);
childContainer.registerSingleton(tokens.DividendsRepository, DividendsRepository);
childContainer.registerSingleton(tokens.DividendsService, DividendsService);

childContainer.registerSingleton(tokens.InvestmentRouter, InvestmentRouter);
childContainer.registerSingleton(tokens.FindByIdInvestmentController, FindByIdInvestmentController);
childContainer.registerSingleton(tokens.FindAllInvestmentController, FindAllInvestmentController);
childContainer.registerSingleton(tokens.CreateInvestmentController, CreateInvestmentController);
childContainer.registerSingleton(tokens.DeleteInvestmentController, DeleteInvestmentController);
childContainer.registerSingleton(tokens.UpdateInvestmentController, UpdateInvestmentController);
childContainer.registerSingleton(tokens.BatchUpdateInvestmentController, BatchUpdateInvestmentController);
childContainer.registerSingleton(tokens.SyncBalanceInvestmentController, SyncBalanceInvestmentController);
childContainer.registerSingleton(tokens.InvestmentViewRepository, InvestmentViewRepository);
childContainer.registerSingleton(tokens.InvestmentRepository, InvestmentRepository);
childContainer.registerSingleton(tokens.InvestmentService, InvestmentService);

childContainer.registerSingleton(tokens.TransactionRouter, TransactionRouter);
childContainer.registerSingleton(tokens.FindByIdTransactionController, FindByIdTransactionController);
childContainer.registerSingleton(tokens.FindAllTransactionController, FindAllTransactionController);
childContainer.registerSingleton(tokens.EventTransactionController, EventTransactionController);
childContainer.registerSingleton(tokens.CreateTransactionController, CreateTransactionController);
childContainer.registerSingleton(tokens.DeleteTransactionController, DeleteTransactionController);
childContainer.registerSingleton(tokens.UpdateTransactionController, UpdateTransactionController);
childContainer.registerSingleton(tokens.TransactionRepository, TransactionRepository);
childContainer.registerSingleton(tokens.TransactionService, TransactionService);

export { childContainer as container };